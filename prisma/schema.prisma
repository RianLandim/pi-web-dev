// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Customer {
    id String @id @default(cuid())

    name    String
    contact String

    users     User[]
    services  Service[]
    part      Part[]
    address   Address   @relation(fields: [addressId], references: [id])
    addressId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

enum PartType {
    REPLACEMENT
    MAINTENANCE
}

model Part {
    id String @id @default(cuid())

    name        String
    description String

    type       PartType
    Customer   Customer @relation(fields: [customerId], references: [id])
    customerId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Address {
    id String @id @default(cuid())

    zipCode      String
    street       String
    neighborhood String
    city         String
    state        String

    number Int

    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    Customer  Customer[]
}

enum ServiceStatus {
    OPEN
    PROGRESS
    CANCELLED
    FINISHED
}

model Service {
    id String @id @default(cuid())

    status      ServiceStatus @default(OPEN)
    scheduledAt DateTime
    customer    Customer      @relation(fields: [customerId], references: [id])
    customerId  String
    checkout    Checkout      @relation(fields: [checkoutId], references: [id])
    checkoutId  String        @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

enum CheckoutStatus {
    OPEN
    CANCELLED
    PAID
}

model Checkout {
    id String @id @default(cuid())

    Service  Service?
    status   CheckoutStatus @default(OPEN)
    closedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    password      String
    image         String?
    accounts      Account[]
    sessions      Session[]
    Customer      Customer? @relation(fields: [customerId], references: [id])
    customerId    String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
